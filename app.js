const { createApp } = Vue;

const app = createApp({
    data() {
        return {
            // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            status: 'disconnected',
            message: '',
            messages: [],
            partnerId: null,
            roomId: null,
            connection: null,

            // Telegram Web App –¥–∞–Ω–Ω—ã–µ
            telegram: null,
            userTelegramId: null,

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            searchTime: 0,
            searchInterval: null,

            // WebSocket
            wsUrl: 'wss://cb86adb831e4.ngrok-free.app',
        };
    },

    computed: {
        statusText() {
            const statusMap = {
                'disconnected': '–û—Ç–∫–ª—é—á–µ–Ω',
                'searching': '–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...',
                'connected': '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
            };
            return statusMap[this.status];
        },

        isSearching() {
            return this.status === 'searching';
        },

        isConnected() {
            return this.status === 'connected';
        },

        formattedSearchTime() {
            const minutes = Math.floor(this.searchTime / 60);
            const seconds = this.searchTime % 60;
            return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
    },

    mounted() {
        this.initTelegramWebApp();
    },

    methods: {
        // –í initTelegramWebApp –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –æ—Ç–ª–∞–¥–∫–∏:
        initTelegramWebApp() {
            this.telegram = window.Telegram?.WebApp;

            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App...');

            if (this.telegram) {
                this.telegram.ready();
                this.telegram.expand();

                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram Web App
                const user = this.telegram.initDataUnsafe?.user;
                console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram:', user);

                if (user && user.id) {
                    this.userTelegramId = user.id.toString(); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                    console.log('‚úÖ Telegram User ID –∏–∑ WebApp:', this.userTelegramId);
                    this.addSystemMessage(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à ID: ${this.userTelegramId}`);
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    this.userTelegramId = this.getUserIdFromUrl();
                    if (this.userTelegramId) {
                        console.log('‚úÖ Telegram User ID –∏–∑ URL:', this.userTelegramId);
                        this.addSystemMessage(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à ID: ${this.userTelegramId}`);
                    } else {
                        // –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        this.userTelegramId = 'test_' + Math.random().toString(36).substr(2, 9);
                        console.log('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π User ID:', this.userTelegramId);
                        this.addSystemMessage('–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ Telegram)');
                    }
                }
            } else {
                // –†–µ–∂–∏–º –±–µ–∑ Telegram Web App
                this.userTelegramId = this.getUserIdFromUrl() || 'dev_' + Math.random().toString(36).substr(2, 9);
                console.log('üîß User ID:', this.userTelegramId);
                this.addSystemMessage(this.userTelegramId.startsWith('dev_') ? '–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏' : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
            }

            console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π User ID:', this.userTelegramId);
        },

        // –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–∑ URL
        getUserIdFromUrl() {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get('tg_user_id');
        },

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
        initWebSocket() {
            try {
                console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...');
                this.connection = new WebSocket(this.wsUrl);

                this.connection.onopen = () => {
                    console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    this.addSystemMessage('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');

                    // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –ù–ê –ü–û–ò–°–ö –ü–û–°–õ–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
                    console.log('üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫, TG ID:', this.userTelegramId);
                    this.sendWebSocketMessage({
                        type: 'find_partner',
                        telegramId: this.userTelegramId  // –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
                    });
                };

                this.connection.onmessage = (event) => {
                    console.log('üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);
                    const data = JSON.parse(event.data);
                    this.handleWebSocketMessage(data);
                };

                this.connection.onclose = () => {
                    console.log('üîí WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                    if (this.status !== 'disconnected') {
                        this.disconnect();
                    }
                };

                this.connection.onerror = (error) => {
                    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
                    this.addSystemMessage('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
                    this.disconnect();
                };

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket:', error);
                this.addSystemMessage('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            }
        },

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
        handleWebSocketMessage(data) {
            switch (data.type) {
                case 'partner_found':
                    this.status = 'connected';
                    this.partnerId = data.partnerId;
                    this.roomId = data.roomId;
                    this.stopSearchTimer();
                    this.addSystemMessage(`–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! ID: ${data.partnerId}`);
                    break;

                case 'partner_disconnected':
                    this.addSystemMessage('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç');
                    this.startSearch();
                    break;

                case 'message':
                    this.addMessage({
                        id: Date.now(),
                        text: data.message,
                        isOwn: false,
                        timestamp: new Date()
                    });
                    break;

                case 'searching':
                    this.addSystemMessage(data.message);
                    break;

                case 'search_timeout':
                    this.addSystemMessage(data.message);
                    this.disconnect();
                    break;

                case 'error':
                    this.addSystemMessage(data.message);
                    break;
            }
        },

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket
        sendWebSocketMessage(message) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message);
            if (this.connection && this.connection.readyState === WebSocket.OPEN) {
                this.connection.send(JSON.stringify(message));
            } else {
                console.log('‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', message);
            }
        },

        // –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        startSearch() {
            if (!this.userTelegramId) {
                this.addSystemMessage('–û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω Telegram ID');
                return;
            }

            this.status = 'searching';
            this.messages = [];
            this.partnerId = null;
            this.roomId = null;
            this.searchTime = 0;

            this.initWebSocket();

            // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø–æ–∏—Å–∫–∞
            this.searchInterval = setInterval(() => {
                this.searchTime++;
            }, 1000);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ - –ñ–î–ï–ú –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
        },

        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫
        stopSearch() {
            if (this.userTelegramId) {
                this.sendWebSocketMessage({
                    type: 'stop_search'
                });
            }
            this.status = 'disconnected';
            this.stopSearchTimer();

            if (this.connection) {
                this.connection.close();
            }
        },

        // –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
        disconnect() {
            if (this.userTelegramId) {
                this.sendWebSocketMessage({
                    type: 'disconnect'
                });
            }
            this.status = 'disconnected';
            this.stopSearchTimer();
            this.partnerId = null;
            this.roomId = null;

            if (this.connection) {
                this.connection.close();
                this.connection = null;
            }
        },

        // –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫
        nextPartner() {
            this.disconnect();
            setTimeout(() => {
                this.startSearch();
            }, 1000);
        },

        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        sendMessage() {
            if (!this.message.trim() || !this.isConnected) return;

            const messageData = {
                id: Date.now(),
                text: this.message.trim(),
                isOwn: true,
                timestamp: new Date()
            };

            this.addMessage(messageData);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
            this.sendWebSocketMessage({
                type: 'message',
                message: this.message.trim(),
                telegramId: this.userTelegramId
            });

            this.message = '';
            this.autoResize();
        },

        // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        addMessage(message) {
            this.messages.push(message);
            this.scrollToBottom();
        },

        // –î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        addSystemMessage(text) {
            this.messages.push({
                id: Date.now(),
                text: text,
                isSystem: true,
                timestamp: new Date()
            });
            this.scrollToBottom();
        },

        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        scrollToBottom() {
            this.$nextTick(() => {
                const container = this.$refs.messagesContainer;
                if (container) {
                    container.scrollTop = container.scrollHeight;
                }
            });
        },

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–æ–∏—Å–∫–∞
        stopSearchTimer() {
            if (this.searchInterval) {
                clearInterval(this.searchInterval);
                this.searchInterval = null;
            }
        },

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
        handleKeyDown(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                this.sendMessage();
            }
        },

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
        autoResize() {
            this.$nextTick(() => {
                const textarea = this.$refs.messageInput;
                if (textarea) {
                    textarea.style.height = 'auto';
                    textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
                }
            });
        },

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        formatTime(timestamp) {
            return new Date(timestamp).toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit'
            });
        }
    },

    beforeUnmount() {
        this.stopSearchTimer();
        if (this.connection) {
            this.connection.close();
        }
    },

    template: `
        <div class="chat-app" :class="status">
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <div class="header">
                <div class="status-indicator" :class="status"></div>
                <div class="status-text">{{ statusText }}</div>
                <div v-if="isSearching" class="search-timer">{{ formattedSearchTime }}</div>
            </div>
            
            <!-- –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π -->
            <div class="messages-container" ref="messagesContainer">
                <div v-if="messages.length === 0 && !isSearching" class="empty-state">
                    <div class="empty-icon">üí¨</div>
                    <div class="empty-text">–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</div>
                    <div class="user-id" v-if="userTelegramId">–í–∞—à ID: {{ userTelegramId }}</div>
                </div>
                
                <div v-else-if="isSearching" class="searching-state">
                    <div class="searching-animation">
                        <div class="dot"></div>
                        <div class="dot"></div>
                        <div class="dot"></div>
                    </div>
                    <div class="searching-text">–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...</div>
                    <div class="user-id" v-if="userTelegramId">–í–∞—à ID: {{ userTelegramId }}</div>
                </div>
                
                <div v-else class="messages">
                    <div v-for="message in messages" :key="message.id" 
                         class="message" 
                         :class="{
                             'own': message.isOwn,
                             'system': message.isSystem
                         }">
                        <div v-if="!message.isSystem" class="message-bubble">
                            <div class="message-text">{{ message.text }}</div>
                            <div class="message-time">{{ formatTime(message.timestamp) }}</div>
                        </div>
                        <div v-else class="system-message">
                            {{ message.text }}
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
            <div class="control-panel">
                <div v-if="!isSearching && !isConnected" class="action-buttons">
                    <button @click="startSearch" class="btn btn-primary">
                        –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                    </button>
                </div>
                
                <div v-else-if="isSearching" class="action-buttons">
                    <button @click="stopSearch" class="btn btn-secondary">
                        –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫
                    </button>
                </div>
                
                <div v-else-if="isConnected" class="chat-controls">
                    <div class="message-input-container">
                        <textarea v-model="message" 
                                  @keydown="handleKeyDown"
                                  @input="autoResize"
                                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                                  class="message-input"
                                  ref="messageInput"
                                  rows="1"></textarea>
                        <button @click="sendMessage" 
                                :disabled="!message.trim()"
                                class="send-btn"
                                :class="{ 'active': message.trim() }">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                                <path d="M2 21L23 12L2 3V10L17 12L2 14V21Z" fill="currentColor"/>
                            </svg>
                        </button>
                    </div>
                    <button @click="nextPartner" class="btn btn-next">
                        –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫
                    </button>
                </div>
            </div>
        </div>
    `
});

app.mount('#app');